---
breadcrumb: <%= vars.platform_name %> Documentation
title: Architecture and Installation Overview
owner: <%= vars.platform_name %> Documentation
---

This guide describes how to design an <%= vars.platform_name %> deployment and install it with VMware Tanzu Application Service for VMs (TAS for VMs) or VMware <%= vars.k8s_runtime_full %> runtime on an IaaS.

## <a id='who'></a> For Architects and Operators

If you are designing and installing an <%= vars.platform_name %> deployment, you have one or both of the following roles:

* **Architects** design an <%= vars.platform_name %> deployment. They know the IaaS to which they intend to deploy it and what other relevant resources they have. In their design, they consider needs for the platform's capacity, availability, security, geography, budget, and other factors. If they do not install <%= vars.platform_name %> themselves, they provide the architectural specifications to whoever does.

* **Operators** run an <%= vars.platform_name %> platform, keep it up-to-date, monitor its health and performance, and fix any problems. They may also install the platform, or perform "Day 2" configurations that expand its functionality and integrate it with external systems.

This guide helps people in both roles create an <%= vars.platform_name %> deployment that does what they want. The contents of this guide follow the phases of a typical <%= vars.platform_name %> planning and installation effort.


## <a id='overview'></a> Planning and Installation Overview

<%= vars.platform_name %> is a suite of products that runs on multiple IaaSes. Planning and installing <%= vars.platform_name %> means building layers from the bottom up, starting with the details of your IaaS and ending with "Day 2" configurations that you perform on a installed and running <%= vars.platform_name %> deployment.

The typical <%= vars.platform_name %> planning and installation process is:

1. **Plan**
  - Review the requirements for your IaaS:
      - [AWS](../customizing/aws.html)
      - [Azure](../customizing/azure.html)
      - [GCP](../customizing/gcp.html)
      - [OpenStack](../customizing/openstack.html)
      - [vSphere](../customizing/vsphere.html)
  - See the Reference Architecture for your IaaS.
  - Assess your platform needs, including capacity, availability, container support, host OS, resource isolation, and geographical distribution. Discuss with your <%= vars.company_name %> contact.

1. **Deploy BOSH and Ops Manager Installation Dashboard**
  - [BOSH](https://bosh.io) is an open-source tool that lets you run software systems in the cloud.
      - BOSH and its IaaS-specific Cloud Provider Interfaces (CPIs) are what enable <%= vars.platform_name %> to run on multiple IaaSes.
      - See [Deploying with BOSH](#bosh) for a description of how BOSH deploys cloud software.
   - The [Ops Manager](../customizing/ops-man.html) Installation Dashboard is a graphical interface that deploys with BOSH. Ops Manager works with the BOSH Director to manage, configure, and upgrade <%= vars.platform_name %> products such as <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>), <%= vars.k8s_runtime_full %> (<%= vars.k8s_runtime_abbr %>), and <%= vars.platform_name %> services and partner products.
      - Ops Manager represents products as _tiles_ with multiple configuration panes that let you input or select configuration values needed for the product.
      - Ops Manager generates BOSH manifests containing the user-supplied configuration values, and sends them to the BOSH Director.
      - After you install Ops Manager and BOSH, you use the Ops Manager UI or API to deploy almost all <%= vars.platform_name %> products.
  - Deploying Ops Manager deploys both BOSH and Ops Manager with a single procedure.
      - On AWS, you can deploy Ops Manager manually, or automatically with a Terraform template.
      - On Azure, you can deploy Ops Manager manually, or automatically with a Terraform template. On Azure Government Cloud and Azure Germany, you can only deploy Ops Manager manually.

1. **Deploy BOSH Add-ons** (Optional)
  - BOSH add-ons include the [IPsec](https://docs.pivotal.io/addon-ipsec/index.html), [ClamAV](https://docs.pivotal.io/addon-antivirus/index.html), and [File Integrity Monitoring](https://docs.pivotal.io/addon-fim/index.html), which enhance <%= vars.platform_name %> platform security and security logging.
  - You deploy these add-ons via BOSH rather than installing them with Ops Manager tiles.

1. **Install Runtimes**
  - [<%= vars.app_runtime_full %>](../customizing/configure-pas.html) (<%= vars.app_runtime_abbr %>) lets developers develop and manage cloud-native apps and software services.
      - <%= vars.app_runtime_abbr %> is based on the Cloud Foundry Foundation's open-source Application Runtime (formerly Elastic Runtime) project.
  - [<%= vars.k8s_runtime_full %>](https://docs.pivotal.io/tkgi/index.html) (<%= vars.k8s_runtime_abbr %>) uses BOSH to run and manage Kubernetes container clusters.
      - <%= vars.k8s_runtime_abbr %> is based on the Cloud Foundry Foundation's open-source Container Runtime (formerly Kubo) project.
  - [<%= vars.segment_runtime_full %>](../customizing/installing-pcf-is.html) lets a single <%= vars.app_runtime_abbr %> deployment run apps from separate, isolated pools of computing, routing, and logging resources.
      - Operators replicate and configure a <%= vars.segment_runtime_full %> tile for each new resource pool they want to create.
     - You must install <%= vars.app_runtime_abbr %> before you can install <%= vars.segment_runtime_full %>.
  - [<%= vars.windows_runtime_full %>](https://docs.pivotal.io/platform/application-service-windows/index.html) (<%= vars.windows_runtime_abbr %>) enables <%= vars.app_runtime_abbr %> to manage Windows Server 2016 (1709) stemcells hosting .NET apps, and can also be replicated to create multiple isolated resource pools.
      - Operators replicate and configure a <%= vars.windows_runtime_abbr %> tile for each new resource pool they want to create.
      - You must install <%= vars.app_runtime_abbr %> before you can install <%= vars.windows_runtime_abbr %>.
  - [<%= vars.app_runtime_full %> &#91;Small Footprint&#93;](../customizing/small-footprint.html) is an alternative to <%= vars.app_runtime_abbr %> that uses far fewer VMs than <%= vars.app_runtime_abbr %> but has limitations.

1. **Day 2 Configurations**
  - Day 2 configurations set up internal operations and external integrations on a running <%= vars.platform_name %> platform.
      - Examples include front end configuration, user accounts, logging and monitoring, internal security, and container and stemcell images.

1. **Install Services**
  - Install software services for <%= vars.platform_name %> developers to use in their apps.
      - Services include the databases, caches, and message brokers that stateless cloud apps rely on to save information.
      - Installing and managing software services on <%= vars.platform_name %> is an ongoing process, and is covered in the [Operator Guide](../opsguide/index.html).


## <a id='contents'></a> Guide Contents

This guide has two parts. The first part explains the <%= vars.platform_name %> planning and installation process, and the second describes the main tools that operators use when installing <%= vars.platform_name %>.

<%= vars.platform_name %> supports a suite of products that runs on multiple IaaSes. Planning and installing <%= vars.platform_name %> means building layers from the bottom up, starting with the details of your IaaS and ending with "Day 2" configurations that you perform on a installed and running <%= vars.platform_name %> deployment.

This guide follows this bottom-up progression:

* [Planning <%= vars.platform_name %>](/platform/customizing/plan.html): Design a <%= vars.platform_name %> platform that runs on your IaaS and fits your needs.

* [Deploying BOSH and Ops Manager](/platform/customizing/deploy-bosh-om.html): Build the foundation of <%= vars.platform_name %>.

* [Deploying BOSH Add-Ons](/platform/customizing/add-ons.html): Use BOSH to extend foundation-level <%= vars.platform_name %> capabilities.

* [Using Ops Manager](/platform/customizing/ops-man.html): Ops Manager provides a dashboard for installing and configuring <%= vars.platform_name %> products and services.

* [Using the Cloud Foundry Command Line Interface (cf CLI)](/platform/cf-cli/index.html): The cf CLI runs <%= vars.platform_name %> operations in the cloud from a shell on your local workstation.

* [Installing Runtimes](/platform/customizing/runtimes.html): Install the application and container runtime environments that <%= vars.platform_name %> exists for.

* [Day 2 Configurations](/platform/customizing/day2.html): Set up internal operations and external integrations for <%= vars.platform_name %>.

* [Troubleshooting and Diagnostics](/platform/customizing/troubleshooting-diagnostics.html)

After installing <%= vars.platform_name %>, Operators install the software services that <%= vars.platform_name %> developers use in their apps. These <%= vars.platform_name %> services include the databases, caches, and message brokers that stateless cloud apps rely on to save information.

Installing and managing software services on <%= vars.platform_name %> is an ongoing process, and is covered in the [Operator Guide](../opsguide/index.html).


## <a id='pcf-docs'></a> Related Documentation

The [Operator Guide](../opsguide/index.html) explains how to maintain a running <%= vars.platform_name %> platform, including monitoring, tuning, troubleshooting, and upgrading.

[Getting Started with <%= vars.platform_name %>](../pas/intro.html) gives a high-level overview of how <%= vars.platform_name %> works and explains how you can try a simple deployment on your own local machine.

For all <%= vars.platform_name %> documentation, see [<%= vars.platform_name %> Documentation](./pcf-docs.html).
